import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks


bot = telebot.TeleBot("8099247456:AAG-ts6NUDVnd6KFKIdgY3b4Wj3tHJD9SBY")  # —Ç–æ–∫–µ–Ω –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞


'''___________________________–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ________________________________________'''
@bot.message_handler(commands=['start'])
def start(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button_start = KeyboardButton('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(button_start)
    bot.send_message(message.chat.id, '''–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫üòä –Ø –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–∏–∫ Albert.
    –Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –º–æ–ª–æ–¥—ã–º —É—á–µ–Ω—ã–º –≤ —Å—Ñ–µ—Ä–µ —Ñ–∏–∑–∏–∫–∏.
–í –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤—Ö–æ–¥–∏—Ç:
    1. –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∞—Å—Ç–æ—Ç—ã –∏–∑–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —ç–Ω–µ—Ä–≥–∏–∏ —Ñ–æ—Ç–æ–Ω–∞ –≤ –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã —Å–≤–µ—Ç–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–ª–∏–Ω –≤–æ–ª–Ω, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ.
    
    2. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ —Å–ø–µ–∫—Ç—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞ –∏ –µ–≥–æ —à–∏—Ä–∏–Ω—ã –Ω–∞ –ø–æ–ª—É–≤—ã—Å–æ—Ç–µ (–∫–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ —Å–ø–µ–∫—Ç—Ä–∞ - –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ—á–∫–∞, –¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã (–ø—Ä–æ–±–µ–ª –∏–ª–∏ —Ç–∞–±) –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å). –í—ã–≤–æ–¥ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –ø–∏–∫–∞ –∏ –µ–≥–æ —à–∏—Ä–∏–Ω—ã –Ω–∞ –ø–æ–ª—É–≤—ã—Å–æ—Ç–µ.
    
    3. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–ª—é–µ–Ω—Å–∞ –ª–∞–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–π –º–æ—â–Ω–æ—Å—Ç–∏. 
    
–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –í–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É" –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 
—Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É"
    ''', reply_markup=markup)
    bot.send_message(message.chat.id, '''–ß—É—Ç—å –Ω–µ –∑–∞–±—ã–ª...
–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Ç–¥—ã—Ö–∞—Ç—åüòâ''', reply_markup=markup)


'''_____________________________–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞_________________________________________'''

@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' or message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É')
def send_help_options(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button_option1 = KeyboardButton('–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã')
    button_option2 = KeyboardButton('–ß–∞—Å—Ç–æ—Ç–∞ –∏ —ç–Ω–µ—Ä–≥–∏—è')
    button_option3 = KeyboardButton('–ì—Ä–∞—Ñ–∏–∫ –ø–∏–∫–∞')
    button_option4 = KeyboardButton('–õ–∞–∑–µ—Ä–Ω—ã–π —Ñ–ª—é–µ–Ω—Å')
    button_end = KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(button_option1, button_option2, button_option3, button_option4, button_end)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:', reply_markup=markup)


'''________________________–ü–æ—Å—Ç—Ä–æ–µ–∫–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–∏–∫–∞ –ø–æ —Ñ–∞–π–ª—É txt____________________________'''

@bot.message_handler(func=lambda message: message.text == '–ì—Ä–∞—Ñ–∏–∫ –ø–∏–∫–∞')
def handle_peak_plot(message):
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–ø–µ–∫—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt.')

@bot.message_handler(content_types=['document'])
def handle_document(message):
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    with open('spectrum.txt', 'wb') as new_file:
        new_file.write(downloaded_file)

    wavelengths, intensities = read_spectrum('spectrum.txt')
    peak_wavelength, fwhm, peak_idx, left_idx, right_idx = find_peak_and_fwhm(wavelengths, intensities)
    plot_spectrum(wavelengths, intensities, peak_wavelength, fwhm, peak_idx, left_idx, right_idx)

    bot.send_message(message.chat.id, f'–ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–∏–∫–∞: {peak_wavelength} nm\n–®–∏—Ä–∏–Ω–∞ –Ω–∞ –ø–æ–ª—É–≤—ã—Å–æ—Ç–µ: {fwhm} nm')
    bot.send_photo(message.chat.id, photo=open('spectrum_plot.png', 'rb'))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def read_spectrum(file_path):
    wavelengths = []
    intensities = []
    with open(file_path, 'r') as file:
        for line in file:
            parts = line.split()
            wavelengths.append(float(parts[0]))
            intensities.append(float(parts[1]))
    return np.array(wavelengths), np.array(intensities)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–∏–∫–∞ –∏ –µ–≥–æ —à–∏—Ä–∏–Ω—ã –Ω–∞ –ø–æ–ª—É–≤—ã—Å–æ—Ç–µ
def find_peak_and_fwhm(wavelengths, intensities):
    peaks, _ = find_peaks(intensities)
    peak_idx = peaks[np.argmax(intensities[peaks])]
    peak_wavelength = wavelengths[peak_idx]
    peak_intensity = intensities[peak_idx]

    half_max = peak_intensity / 2
    left_idx = np.where(intensities[:peak_idx] <= half_max)[0][-1]
    right_idx = np.where(intensities[peak_idx:] <= half_max)[0][0] + peak_idx

    fwhm = wavelengths[right_idx] - wavelengths[left_idx]
    return peak_wavelength, fwhm, peak_idx, left_idx, right_idx

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def plot_spectrum(wavelengths, intensities, peak_wavelength, fwhm, peak_idx, left_idx, right_idx):
    plt.plot(wavelengths, intensities, label='Spectrum')
    plt.plot(wavelengths[peak_idx], intensities[peak_idx], 'ro', label='Peak')
    plt.hlines(intensities[peak_idx] / 2, wavelengths[left_idx], wavelengths[right_idx], colors='r', label='FWHM')
    plt.xlabel('–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã')
    plt.ylabel('–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å')
    plt.title('–°–ø–µ–∫—Ç—Ä —Å –ø–∏–∫–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏ –ø–æ–ª–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π –Ω–∞ –ø–æ–ª—É–≤—ã—Å–æ—Ç–µ')
    plt.legend()
    plt.savefig('spectrum_plot.png')
    plt.close()

@bot.message_handler(func=lambda message: message.text == '–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã')
def dlin_voln(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button_chastota = KeyboardButton('–ß–∞—Å—Ç–æ—Ç–∞ –∏–∑–ª—É—á–µ–Ω–∏—è')
    button_energy = KeyboardButton('–≠–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–Ω–∞')
    button_end = KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(button_chastota, button_energy, button_end)
    bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?', reply_markup=markup)


'''____________________ –î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã –ø–æ —á–∞—Å—Ç–æ—Ç–µ___________________'''
@bot.message_handler(func=lambda message: message.text == '–ß–∞—Å—Ç–æ—Ç–∞ –∏–∑–ª—É—á–µ–Ω–∏—è')
def voln1(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∏–∑–ª—É—á–µ–Ω–∏—è –≤ –ì—Ü (–¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É):")
    bot.register_next_step_handler(message, process_frequency)
def process_frequency(message):
    try:
        frequency = float(message.text)
        wavelength = length_voln(frequency)
        if 1e-12 <= wavelength < 1e-9:
            diapazon = "–ì–∞–º–º–∞-–∏–∑–ª—É—á–µ–Ω–∏–µ–º"
        elif 1e-9 <= wavelength < 1e-6:
            diapazon = "–£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"
        elif 1e-6 <= wavelength < 1e-3:
            diapazon = "–ò–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"
        elif 1e-3 <= wavelength < 1:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 1 <= wavelength < 10:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 10 <= wavelength < 100:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–¥–µ—Ü–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 100 <= wavelength < 1000:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 1e-6 <= wavelength < 1e-3:
            diapazon = "–ò–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"
        elif 1e-3 <= wavelength < 1:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 1 <= wavelength < 10:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 10 <= wavelength < 100:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–¥–µ—Ü–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 100 <= wavelength < 1000:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        else:
            diapazon = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"

        response = f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á–∞—Å—Ç–æ—Ç—É –≤–æ–ª–Ω—ã {frequency} –ì—Ü. –î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã —Å–≤–µ—Ç–∞ –ø—Ä–∏ —Ç–∞–∫–æ–π —á–∞—Å—Ç–æ—Ç–µ {wavelength} –º. \n –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å {diapazon}"
    except ValueError:
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button_end = KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    button_prod = KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(button_end, button_prod)
    bot.send_message(message.chat.id, response, reply_markup=markup)
def length_voln(frequency):
    c = 3e8  # —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞ –≤ –≤–∞–∫—É—É–º–µ –≤ –º/—Å
    wavelength = c /frequency
    return wavelength


'''____________________–¥–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã –ø–æ —ç–Ω–µ—Ä–≥–∏–∏ —Ñ–æ—Ç–æ–Ω–∞____________________'''
@bot.message_handler(func=lambda message: message.text == '–≠–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–Ω–∞')
def voln1(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —ç–Ω–µ—Ä–≥–∏—é —Ñ–æ—Ç–æ–Ω–∞ –≤ –î–∂*—Å (–¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É):")
    bot.register_next_step_handler(message, process_energy)
def process_energy(message):
    try:
        energy = float(message.text)
        wavelength = length_voln1(energy)
        if 1e-12 <= wavelength < 1e-9:
            diapazon = "–ì–∞–º–º–∞-–∏–∑–ª—É—á–µ–Ω–∏–µ–º"
        elif 1e-9 <= wavelength < 1e-6:
            diapazon = "–£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"
        elif 1e-6 <= wavelength < 1e-3:
            diapazon = "–ò–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"
        elif 1e-3 <= wavelength < 1:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 1 <= wavelength < 10:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 10 <= wavelength < 100:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–¥–µ—Ü–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 100 <= wavelength < 1000:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 1e-6 <= wavelength < 1e-3:
            diapazon = "–ò–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"
        elif 1e-3 <= wavelength < 1:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 1 <= wavelength < 10:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 10 <= wavelength < 100:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–¥–µ—Ü–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 100 <= wavelength < 1000:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        else:
            diapazon = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"

        response = f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —ç–Ω–µ—Ä–≥–∏—é —Ñ—Ç–æ–Ω–∞ –≤–æ–ª–Ω—ã {energy} –î–∂*—Å. –î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã —Å–≤–µ—Ç–∞ –ø—Ä–∏ —Ç–∞–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏ {wavelength} –º. \n –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å {diapazon}"
    except ValueError:
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button_end = KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    button_prod = KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(button_end, button_prod)
    bot.send_message(message.chat.id, response, reply_markup=markup)
def length_voln1(energy):
    c = 3e8  # —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞ –≤ –≤–∞–∫—É—É–º–µ –≤ –º/—Å
    h = 6.626e-34
    wavelength = (h*c)/energy
    return wavelength

@bot.message_handler(func=lambda message: message.text == '–ß–∞—Å—Ç–æ—Ç–∞ –∏ —ç–Ω–µ—Ä–≥–∏—è')
def dlin_voln(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button_chastota1 = KeyboardButton('–ß–∞—Å—Ç–æ—Ç—É –∏–∑–ª—É—á–µ–Ω–∏—è')
    button_energy1 = KeyboardButton('–≠–Ω–µ—Ä–≥–∏—é —Ñ–æ—Ç–æ–Ω–∞')
    button_end = KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(button_chastota1, button_energy1, button_end)
    bot.send_message(message.chat.id, '–ß—Ç–æ –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏?', reply_markup=markup)


'''____________________–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ß–∞—Å—Ç–æ—Ç—ã —Ñ–æ—Ç–æ–Ω–∞____________________'''

@bot.message_handler(func=lambda message: message.text == '–ß–∞—Å—Ç–æ—Ç—É –∏–∑–ª—É—á–µ–Ω–∏—è')
def voln1(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã –≤ –º–µ—Ç—Ä–∞—Ö (–¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É):")
    bot.register_next_step_handler(message, process_frequency1)
def process_frequency1(message):
    try:
        wavelength = float(message.text)
        frequency = frequency_voln(wavelength)
        if 1e-12 <= wavelength < 1e-9:
            diapazon = "–ì–∞–º–º–∞-–∏–∑–ª—É—á–µ–Ω–∏–µ–º"
        elif 1e-9 <= wavelength < 1e-6:
            diapazon = "–£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"
        elif 1e-6 <= wavelength < 1e-3:
            diapazon = "–ò–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"
        elif 1e-3 <= wavelength < 1:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 1 <= wavelength < 10:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 10 <= wavelength < 100:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–¥–µ—Ü–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 100 <= wavelength < 1000:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 1e-6 <= wavelength < 1e-3:
            diapazon = "–ò–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"
        elif 1e-3 <= wavelength < 1:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 1 <= wavelength < 10:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 10 <= wavelength < 100:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–¥–µ—Ü–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 100 <= wavelength < 1000:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        else:
            diapazon = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"

        response = f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã {wavelength } –º. –ü—Ä–∏ —Ç–∞–∫–æ–π –¥–ª–∏–Ω–µ —Å–≤–µ—Ç–∞ —á–∞—Å—Ç–æ—Ç–∞ —Ä–∞–≤–Ω–∞ {frequency} –º. \n –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å {diapazon}"
    except ValueError:
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button_end = KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    button_prod = KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(button_end, button_prod)
    bot.send_message(message.chat.id, response, reply_markup=markup)
def frequency_voln(wavelength):
    c = 3e8  # —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞ –≤ –≤–∞–∫—É—É–º–µ –≤ –º/—Å
    frequency = c / wavelength
    return frequency


'''____________________–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ —Ñ–æ—Ç–æ–Ω–∞____________________'''
@bot.message_handler(func=lambda message: message.text == '–≠–Ω–µ—Ä–≥–∏—é —Ñ–æ—Ç–æ–Ω–∞')
def voln1(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã –≤ –º–µ—Ç—Ä–∞—Ö (–¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É):")
    bot.register_next_step_handler(message, process_energy1)
def process_energy1(message):
    try:
        wavelength = float(message.text)
        energy = energy_voln(wavelength)
        if 1e-12 <= wavelength < 1e-9:
            diapazon = "–ì–∞–º–º–∞-–∏–∑–ª—É—á–µ–Ω–∏–µ–º"
        elif 1e-9 <= wavelength < 1e-6:
            diapazon = "–£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"
        elif 1e-6 <= wavelength < 1e-3:
            diapazon = "–ò–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"
        elif 1e-3 <= wavelength < 1:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 1 <= wavelength < 10:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 10 <= wavelength < 100:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–¥–µ—Ü–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 100 <= wavelength < 1000:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 1e-6 <= wavelength < 1e-3:
            diapazon = "–ò–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"
        elif 1e-3 <= wavelength < 1:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 1 <= wavelength < 10:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 10 <= wavelength < 100:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–¥–µ—Ü–∏–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        elif 100 <= wavelength < 1000:
            diapazon = "–†–∞–¥–∏–æ–≤–æ–ª–Ω–∞–º–∏ (–º–µ—Ç—Ä–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)"
        else:
            diapazon = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"

        response = f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–ª–∏–Ω—É –≤–æ–ª–Ω—ã {wavelength} –º. –ü—Ä–∏ —Ç–∞–∫–æ–π –¥–ª–∏–Ω–µ —Å–≤–µ—Ç–∞ —ç–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–Ω–∞ —Ä–∞–≤–Ω–∞ {energy} –î–∂*—Å. \n –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å {diapazon}"
    except ValueError:
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button_end = KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    button_prod = KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(button_end, button_prod)
    bot.send_message(message.chat.id, response, reply_markup=markup)
def energy_voln(wavelength):
    c = 3e8  # —Å–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞ –≤ –≤–∞–∫—É—É–º–µ –≤ –º/—Å
    h = 6.626e-34  #–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ü–ª–∞–Ω–∫–∞
    energy = (h * c) / wavelength
    return energy


'''___________________________–û–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –¥–æ–≤–æ–ª–µ–Ω –æ–ø—ã—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –∫–∞–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –µ–º—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç.__________________________________________'''

@bot.message_handler(func=lambda message: message.text == '–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
def go_back_to_menu(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button_menu = KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(button_menu)
    bot.send_message(message.chat.id, '''–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á‚úå
–ï—Å–ª–∏ —è –í–∞–º –µ—â–µ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"''', reply_markup=markup)
    # –û–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ—Ç 1 –¥–æ 5:')
    bot.register_next_step_handler(message, get_feedback)
def get_feedback(message):
    feedback = message.text
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ?')
    bot.register_next_step_handler(message, get_missing_features, feedback)
def get_missing_features(message, feedback):
    missing_features = message.text
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è! –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å.')


'''_______________________________________–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–ª—é–µ–Ω—Å–∞ –ª–∞–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–π –º–æ—â–Ω–æ—Å—Ç–∏.______________________________________________________________________'''

@bot.message_handler(func=lambda message: message.text == '–õ–∞–∑–µ—Ä–Ω—ã–π —Ñ–ª—é–µ–Ω—Å')
def send_welcome(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button_end = KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    button_prod = KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É')
    markup.add(button_end, button_prod)
    bot.send_message(message.chat.id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é –º–æ—â–Ω–æ—Å—Ç—å –ª–∞–∑–µ—Ä–∞ (–≤ –≤–∞—Ç—Ç–∞—Ö):", reply_markup=markup)
    bot.register_next_step_handler(message, get_average_power)
def get_average_power(message):
    try:
        average_power = float(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø—è—Ç–Ω–∞ –ª–∞–∑–µ—Ä–∞ (–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):")
        bot.register_next_step_handler(message, get_spot_area, average_power)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –º–æ—â–Ω–æ—Å—Ç–∏.")
        bot.register_next_step_handler(message, get_average_power)
def get_spot_area(message, average_power):
    try:
        spot_area = float(message.text)
        fluence = calculate_fluence(average_power, spot_area)
        bot.send_message(message.chat.id, f"–§–ª—é–µ–Ω—Å –ª–∞–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {fluence} –î–∂/—Å–º¬≤.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–ª–æ—â–∞–¥–∏ –ø—è—Ç–Ω–∞.")
        bot.register_next_step_handler(message, get_spot_area, average_power)
def calculate_fluence(average_power, spot_area):
    # –§–ª—é–µ–Ω—Å (J/cm¬≤) = –°—Ä–µ–¥–Ω—è—è –º–æ—â–Ω–æ—Å—Ç—å (W) / –ü–ª–æ—â–∞–¥—å –ø—è—Ç–Ω–∞ (cm¬≤)
    return average_power / spot_area

print("Bot is running...")
bot.polling()